spring.application.name=orderService


spring.datasource.url=jdbc:postgresql://localhost:5432/ordersDB
spring.datasource.username=postgres
spring.datasource.password=1234

server.port=8084
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s



#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#ZIPKIN
management.zipkin.tracing.endpoint=http://localhost:9411
#1.0 means send 100% of the request which we are receiving from our system to zipkin
management.tracing.sampling.probability=1.0



# Kafka Properties
#this is the same port in the docker compose file for kafka
spring.kafka.bootstrap-servers=localhost:29092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#we are doing this because we have two OrderPlacedEvent in different locations(i.e the order service and notification service) , so we are telling spring that there are the same thing
#spring.kafka.producer.properties.spring.json.type.mapping=event:com.zeco.orderservice.event.OrderPlacedEvent
#logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
